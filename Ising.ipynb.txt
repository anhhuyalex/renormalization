{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy\n",
    "\n",
    "\"\"\"\n",
    "based on code at http://pages.physics.cornell.edu/~myers/teaching/ComputationalMethods/\n",
    "\"\"\"\n",
    "class IsingModel:\n",
    "    \"\"\"Ising model class\"\"\"\n",
    "\n",
    "    def __init__(self, N=10, T=2. / scipy.log(1. + scipy.sqrt(2.)),\n",
    "                 H=0., seed=1):\n",
    "        \"\"\"\n",
    "        Call scipy.random.seed with argument seed;\n",
    "        Set self.N to be N\n",
    "        Build self.lattice to be random 50/50 0/1, using random_integers\n",
    "        Call self.SetTemperatureField with T, H\n",
    "        \"\"\"\n",
    "        if seed is None:\n",
    "            scipy.random.seed()\n",
    "        else:\n",
    "            scipy.random.seed(seed)\n",
    "        self.lattice = scipy.random.random_integers(0, 1, (N, N))\n",
    "        self.SetTemperatureField(T, H)\n",
    "        self.N = N\n",
    "\n",
    "    def SetTemperatureField(self, T, H):\n",
    "        \"\"\"\n",
    "        Sets self.privateTemperature, self.privateField\n",
    "        #\n",
    "        #\n",
    "        After debugging, for faster performance, set up algorithm-dependent\n",
    "        data structures to avoid taking exponentials for every flipped spin\n",
    "        #\n",
    "        Heat bath algorithm:\n",
    "        Sets up self.heatBathProbUp to be array of doubles\n",
    "        of length Z+1=5 (the number of different neighbors up (nUp) possible)\n",
    "        Figure out spin energies eUp, eDown given nUp; figure out Boltzmann\n",
    "        relative probabilities boltzUp, boltzDown;\n",
    "        If T!= 0, set heatBathProbUp(nUp) to boltzUp/(boltzUp+boltzDown)\n",
    "        otherwise set it to (0, 0.5, 1) if eUp is (positive, zero, negative).\n",
    "        #\n",
    "        Metropolis algorithm:\n",
    "        Sets up self.MetropolisProbUp to be a 2x5 matrix of Floats\n",
    "        (first index is current state of spin, second index is nUp)\n",
    "        Iterate over nUp;\n",
    "          If T != 0\n",
    "           If eDown > eUp, set probability to flip from down to up to one,\n",
    "              up to down to 1-exp(-(eDown-eUp)/T)\n",
    "           If eDown <= eUp, set probability to flip from up to down to one,\n",
    "              down to up to 1-exp(-(eUp-eDown)/T)\n",
    "          Otherwise (T=0) set appropriately\n",
    "        #\n",
    "        Wolff algorithm\n",
    "        set p\n",
    "        \"\"\"\n",
    "        self.privateTemperature = T\n",
    "        self.privateField = H\n",
    "        J = 1.\t\t# Convention: also float to avoid int problems\n",
    "        # Set up heat bath algorithm lookup table\n",
    "        self.heatBathProbUp = scipy.zeros(5, float)\n",
    "        for nUp in range(0, 5):  # Four neighbors on square lattice\n",
    "            sumNbrs = 2 * (nUp - 2)  # Sum of spins of neighbors\n",
    "            eUp = -J * sumNbrs - H\n",
    "            eDown = J * sumNbrs + H\n",
    "            if T != 0:\n",
    "                boltzUp = scipy.exp(-eUp / T)\n",
    "                boltzDown = scipy.exp(-eDown / T)\n",
    "                self.heatBathProbUp[nUp] = boltzUp / (boltzUp + boltzDown)\n",
    "            else:\n",
    "                if eUp > 0:\n",
    "                    self.heatBathProbUp[nUp] = 0.\n",
    "                elif eUp < 0:\n",
    "                    self.heatBathProbUp[nUp] = 1.\n",
    "                else:\n",
    "                    self.heatBathProbUp[nUp] = 0.5\n",
    "        # Set up Metropolis algorithm lookup table\n",
    "        self.MetropolisProbUp = scipy.zeros((2, 5), float)\n",
    "        for nUp in range(0, 5):  # Four neighbors on square lattice\n",
    "            sumNbrs = 2 * (nUp - 2)  # Sum of spins of neighbors\n",
    "            eUp = -J * sumNbrs - H\n",
    "            eDown = J * sumNbrs + H\n",
    "            if T != 0:\n",
    "                if eDown > eUp:  # Down spin unstable\n",
    "                    # If current spin is down, flip up\n",
    "                    self.MetropolisProbUp[0, nUp] = 1.\n",
    "                    # If current spin is up, flip down with prob e^(-|dE|/T)\n",
    "                    self.MetropolisProbUp[1, nUp] = 1. - \\\n",
    "                        scipy.exp(-(eDown - eUp) / T)\n",
    "                else:  # Up spin unstable\n",
    "                    # If current spin is down, flip up with prob e^(-|dE|/T)\n",
    "                    self.MetropolisProbUp[\n",
    "                        0, nUp] = scipy.exp(-(eUp - eDown) / T)\n",
    "                    # If current spin is up, flip down\n",
    "                    self.MetropolisProbUp[1, nUp] = 0.\n",
    "            else:\n",
    "                if eDown > eUp:  # Down spin unstable\n",
    "                    # If current spin is down, flip up\n",
    "                    self.MetropolisProbUp[0, nUp] = 1.\n",
    "                    # If current spin is up, leave alone\n",
    "                    self.MetropolisProbUp[1, nUp] = 0.\n",
    "                elif eDown < eUp:  # Up spin unstable\n",
    "                    # If current spin is down, leave alone\n",
    "                    self.MetropolisProbUp[0, nUp] = 0.\n",
    "                    # If current spin is up, flip down\n",
    "                    self.MetropolisProbUp[1, nUp] = 1.\n",
    "        # Set up Wolff algorithm\n",
    "        if T == 0:\n",
    "            self.p = 0.\n",
    "        else:\n",
    "            self.p = 1.0 - scipy.exp(-2. * J / T)\n",
    "\n",
    "    def GetTemperature(self):\n",
    "        \"\"\"\n",
    "        Returns self.privateTemperature\n",
    "        \"\"\"\n",
    "        return self.privateTemperature\n",
    "\n",
    "    def GetField(self):\n",
    "        \"\"\"\n",
    "        Returns self.privateField\n",
    "        \"\"\"\n",
    "        return self.privateField\n",
    "\n",
    "    def NeighborsUp(self, i, j):\n",
    "        \"\"\" Sums self.lattice at four neighbor sites, modulo self.N \"\"\"\n",
    "        ip1 = (i + 1) % self.N\n",
    "        im1 = (i - 1) % self.N\n",
    "        jp1 = (j + 1) % self.N\n",
    "        jm1 = (j - 1) % self.N\n",
    "        return (self.lattice[ip1][j] + self.lattice[im1][j]\n",
    "                + self.lattice[i][jp1] + self.lattice[i][jm1])\n",
    "\n",
    "    def SweepHeatBath(self, nTimes=1):\n",
    "        \"\"\"\n",
    "        Slow variant (for debugging):\n",
    "        For each time in range(ntimes):\n",
    "            For n in range(N):\n",
    "                Pick a random spin (i,j)\n",
    "                Find NeighborsUp(i,j)\n",
    "                Find the probability heatBathProbUp that the spin will be up\n",
    "                Create a random number r in (0,1]\n",
    "                if rand < heatBathProbUp, set spin lattice[i][j]=1\n",
    "        #\n",
    "        Fast variant:\n",
    "        For each time in range(ntimes):\n",
    "            Creates N random (i,j) pairs\n",
    "            Creates N random numbers in (0,1]\n",
    "                (note: use 1-scipy.random.random() to avoid zero)\n",
    "            if rand < heatBathProbUp for NeighborsUp(i,j)\n",
    "                set spin lattice[i][j]=1\n",
    "            else set it to zero\n",
    "        \"\"\"\n",
    "        for time in range(nTimes):\n",
    "            iArr = scipy.random.randint(0, self.N, self.N * self.N)\n",
    "            jArr = scipy.random.randint(0, self.N, self.N * self.N)\n",
    "            randomArr = 1. - scipy.random.random(self.N * self.N)\n",
    "            for i, j, rand in zip(iArr, jArr, randomArr):\n",
    "                if rand < self.heatBathProbUp[self.NeighborsUp(i, j)]:\n",
    "                    self.lattice[i, j] = 1\n",
    "                else:\n",
    "                    self.lattice[i, j] = 0\n",
    "\n",
    "    def SweepMetropolis(self, nTimes=1):\n",
    "        \"\"\"\n",
    "        For each time in range(ntimes):\n",
    "            Creates N random (i,j) pairs\n",
    "            Creates N random numbers in (0,1]\n",
    "            if rand < MetropolisProbUp for current spin, NeighborsUp(i,j)\n",
    "                    set spin lattice[i][j]=1\n",
    "            else set it to zero\n",
    "        \"\"\"\n",
    "        for time in range(nTimes):\n",
    "            iArr = scipy.random.randint(0, self.N, self.N * self.N)\n",
    "            jArr = scipy.random.randint(0, self.N, self.N * self.N)\n",
    "            randomArr = 1. - scipy.random.random(self.N * self.N)\n",
    "            for i, j, rand in zip(iArr, jArr, randomArr):\n",
    "                if rand < self.MetropolisProbUp[self.lattice[i][j],\n",
    "                                                self.NeighborsUp(i, j)]:\n",
    "                    self.lattice[i][j] = 1\n",
    "                else:\n",
    "                    self.lattice[i][j] = 0\n",
    "\n",
    "    def WolffMoveRecursive(self):\n",
    "        \"\"\"\n",
    "        Slow, recursive variant of Wolff move\n",
    "        #\n",
    "        Pick a random spin; remember its direction\n",
    "        Flip it\n",
    "        Call FlipNeighbors; add one to its result\n",
    "        return spinsFlipped\n",
    "        \"\"\"\n",
    "        i = scipy.random.randint(0, self.N)\n",
    "        j = scipy.random.randint(0, self.N)\n",
    "        oldSpin = self.lattice[i, j]\n",
    "        self.lattice[i, j] = (self.lattice[i, j] + 1) % 2\n",
    "        spinsFlipped = 1 + self.FlipNeighbors(i, j, oldSpin)\n",
    "        return spinsFlipped\n",
    "\n",
    "    def FlipNeighbors(self, i, j, oldSpin):\n",
    "        \"\"\"\n",
    "        Used by WolffMoveRecursive\n",
    "        #\n",
    "        Initialize spinsFlipped to zero\n",
    "        For m, n in neighbors of i, j:\n",
    "           if lattice[m][n]==oldSpin and random()<p\n",
    "              flip spin; add one to spinsFlipped\n",
    "              Call FlipNeighbors on (m,n); add to spinsFlipped\n",
    "        return spinsFlipped\n",
    "        \"\"\"\n",
    "        spinsFlipped = 0\n",
    "        ip1 = (i + 1) % self.N\n",
    "        im1 = (i - 1) % self.N\n",
    "        jp1 = (j + 1) % self.N\n",
    "        jm1 = (j - 1) % self.N\n",
    "        neighbors = [(ip1, j), (im1, j), (i, jp1), (i, jm1)]\n",
    "        for m, n in neighbors:\n",
    "            if self.lattice[m][n] == oldSpin:\n",
    "                if scipy.random.random() < self.p:\n",
    "                    self.lattice[m][n] = (self.lattice[m][n] + 1) % 2\n",
    "                    spinsFlipped += 1 + self.FlipNeighbors(m, n, oldSpin)\n",
    "        return spinsFlipped\n",
    "\n",
    "    def WolffMove(self):\n",
    "        \"\"\"\n",
    "        Faster, list-based Wolff move.\n",
    "        #\n",
    "        Pick a random spin; remember its direction as oldSpin\n",
    "        Push it onto a list \"toFlip\" of spins to flip\n",
    "        Set spinsFlipped = 0\n",
    "        While there are spins left in toFlip\n",
    "           Remove the first spin\n",
    "           If it has not been flipped in between\n",
    "              Flip it\n",
    "              Add one to spinsFlipped\n",
    "              For each of its neighbors\n",
    "                  if the neighbor is in the oldSpin direction\n",
    "                  with probability p, put it on the stack\n",
    "        Return spinsFlipped\n",
    "        \"\"\"\n",
    "        i = scipy.random.randint(0, self.N)\n",
    "        j = scipy.random.randint(0, self.N)\n",
    "        oldSpin = self.lattice[i, j]\n",
    "        toFlip = [(i, j)]\n",
    "        spinsFlipped = 0\n",
    "        while len(toFlip) > 0:\n",
    "            i, j = toFlip.pop(0)\n",
    "            # Check if flipped in between\n",
    "            if self.lattice[i, j] == oldSpin:\n",
    "                self.lattice[i, j] = (self.lattice[i, j] + 1) % 2\n",
    "                spinsFlipped += 1\n",
    "                ip1 = (i + 1) % self.N\n",
    "                im1 = (i - 1) % self.N\n",
    "                jp1 = (j + 1) % self.N\n",
    "                jm1 = (j - 1) % self.N\n",
    "                neighbors = [(ip1, j), (im1, j), (i, jp1), (i, jm1)]\n",
    "                for m, n in neighbors:\n",
    "                    if self.lattice[m, n] == oldSpin:\n",
    "                        if scipy.random.random() < self.p:\n",
    "                            toFlip.append((m, n))\n",
    "        return spinsFlipped\n",
    "\n",
    "    def SweepWolff(self, nTimes=1, partialSweep=0):\n",
    "        \"\"\"\n",
    "        Do nTimes sweeps of the Wolff algorithm, returning partialSweep\n",
    "        (1) The variable partialSweep is the number of `extra' spins flipped\n",
    "        in the previous Wolff cluster moved that belong to the current sweep.\n",
    "        (2) A sweep is comprised of Wolff cluster moves until at least\n",
    "        N*N-partialSweep spins have flipped. (Just add the spinsFlipped\n",
    "        from WolffMove to partialSweep, while partialSweep < N*N, the\n",
    "        new partialSweep is the current one minus N*N.)\n",
    "        (3) Return the new value of partialSweep after nTimes sweeps.\n",
    "        (4) You might print an error message if the field is not zero\n",
    "        \"\"\"\n",
    "        if self.GetField() != 0.:\n",
    "            print(\"Field will be ignored by Wolff algorithm\")\n",
    "        for time in range(nTimes):\n",
    "            while partialSweep < self.N * self.N:\n",
    "                partialSweep += self.WolffMove()\n",
    "            partialSweep = partialSweep - (self.N * self.N)\n",
    "        return partialSweep\n",
    "    \n",
    "    def calculate_correlation(self, R):\n",
    "        # pick N random points\n",
    "        pts = scipy.random.randint(0, self.N, (int(self.N*self.N/(R*R)),2))\n",
    "        lat = -1+2*self.lattice\n",
    "        corr = np.mean([ (lat[i,j]*lat[(i+R)%self.N,j]) for i,j in pts])\n",
    "        \n",
    "        return corr\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Copyright (C) Cornell University\n",
    "# All rights reserved.\n",
    "# Apache License, Version 2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:19: DeprecationWarning: This function is deprecated. Please call randint(0, 1 + 1) instead\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saving to folder ising_dat/data_729_1571724238\n",
      "738\r"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import os\n",
    "\n",
    "Tc = 2. / scipy.log(1. + scipy.sqrt(2.))\n",
    "print(\"Tc={}\".format(Tc))\n",
    "N = 729 # size of lattice edge\n",
    "nSweeps = 10000 # number of roughly independent configurations to generate\n",
    "thermalizeSweeps = 10 # number of sweeps to wait for thermalization before calculating correlation averages\n",
    "\n",
    "ising = IsingModel(N, T=Tc)\n",
    "m = []\n",
    "corr = []\n",
    "corr_range = range(2,int(N/2))\n",
    "\n",
    "folder = 'ising_dat/data_{}_{}'.format(N,int(time.time()))\n",
    "os.mkdir(folder)\n",
    "print('saving to folder {}'.format(folder))\n",
    "fname_template = folder+'/lattice_{:05d}'\n",
    "\n",
    "for t in range(nSweeps):\n",
    "    print(t,end='\\r')\n",
    "    #plt.figure()\n",
    "    #plt.imshow(ising.lattice)\n",
    "    \n",
    "    m.append(np.mean(ising.lattice))\n",
    "    corr.append([ising.calculate_correlation(r) for r in corr_range])\n",
    "    np.savez_compressed(fname_template.format(t),ising.lattice)\n",
    "    \n",
    "    ising.SweepMetropolis() # run both a Metropolis\n",
    "    ising.SweepWolff() # and a Wolf sweep to randomize effectively at large and shorter scales\n",
    "    \n",
    "corr = np.array(corr)\n",
    "corr_avg = np.mean(corr[thermalizeSweeps:],axis=0)\n",
    "m = np.array(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.22961246 0.68401138]\n",
      "[[6.88755058e-06 1.40921246e-05]\n",
      " [1.40921246e-05 3.21037655e-05]]\n",
      "0.22972343723854197\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit a powerlaw to the correlation functions calculated on each configuration\n",
    "\n",
    "import scipy.optimize\n",
    "\n",
    "def power_law_fit(x,alpha,c):\n",
    "    return c/x**alpha\n",
    "\n",
    "try:\n",
    "    fit, cov = scipy.optimize.curve_fit(power_law_fit,corr_range[:int(N/10)],corr_avg[:int(N/10)])\n",
    "\n",
    "    plt.figure()\n",
    "    plt.plot(corr_avg)\n",
    "    plt.plot([power_law_fit(r,fit[0],fit[1]) for r in corr_range])\n",
    "    print(fit)\n",
    "    print(cov)\n",
    "except:\n",
    "    print('no fit')\n",
    "    plt.figure()\n",
    "    plt.plot(corr_avg)\n",
    "\n",
    "# plt the magnetization of the model\n",
    "plt.figure()\n",
    "m_norm = np.abs(-1+2*m)\n",
    "plt.plot(m_norm)\n",
    "print(np.std(m_norm[thermalizeSweeps:])/np.mean(m_norm[thermalizeSweeps:])) # susceptibility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4111067832553379\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# show a lattice and print is magnetization\n",
    "plt.imshow(ising.lattice)\n",
    "print(\"m={}\".format(-1+2*np.mean(ising.lattice)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
